@startuml
!pragma layout smetana

component TMDB_API [
The Movie Database API
]

database Database [
Postgres Database
]

'' Styling
skinparam ArrowThickness 3
skinparam ArrowColor Orange
skinparam backgroundColor #f0f0f0
skinparam borderColor Black
skinparam borderThickness 1

skinparam class {
  BackgroundColor white
}

skinparam Component {
  BackgroundColor Lightblue
}

''

Class Application {
  +main(String[] args)
  + addData()
}

package "config" {
Class HibernateConfig
}

package "daos" {
Interface IDAO {
	T create(T t);
	T read(Object id);
	T update(T t);
	void delete(Object id);
}

Class MovieDao {
- EntityManagerFactory emf
- static MovieDAO instance
+ MovieDAO(EntityManagerFactory emf)
+ static MovieDAO getInstance(EntityManagerFactory emf)
+ MovieDTO persistEntity(MovieDTO movieDTO)
+ List<MovieDTO> persistListOfMovies(List<MovieDTO> movieDTOList)
+ List<MovieDTO> findAll()
+ MovieDTO findEntity(Long id)
+ MovieDTO updateEntity(MovieDTO movieDTO, Long id)
+ void removeEntity(Long id)
+ MovieDTO findGenreInASpecificMovie(String title)
+ MovieDTO findDirectorInASpecificMovie(String title)
+ MovieDTO findActorsInASpecificMovie(String title)
+ List<MovieDTO> findAllMoviesInASpecificGenre(String genreName)
}


Class GenreDAO {


}

Class ActorDAO {

}

Class DirectorDAO {

}
}

package "dtos" {
Class ActorDTO {
- id : long
- name : String
- movies : List<MovieDTO>
}

Class MovieDTO {
- id : long
- title : String
- originalLanguage : String
- releaseDate : String
- popularity : Double
- voteAverage : Double
- genreIDs : List<Long>
- crew : List<CrewMemberDTO>
- genres : List<GenreDTO>
- actors : List<ActorDTO>
- director : DirectorDTO
}

Class CrewMemberDTO {
+ id : long
+ name : String
+ job : String
- cast : List<CrewMemberDTO>
- crew : List<CrewMemberDTO>
}

Class GenreDTO {
- id : long
- name : String
- genres : List<GenreDTO>
}

Class DirectorDTO {
- id : long
- name : String
- directors : List<DirectorDTO>
}
}

package "entities" {
Class Actor {
    id : Long
    name : String
    movies : List<Movie>
  }

Class Movie {
+ id : Long
+ title : String
+ originalLanguage : String
+ releaseDate : String
+ popularity : Double
+ voteAverage : Double
+ genreIDs : List<Long>
+ crew : List<CrewMember>
+  genres : List<Genre>
+ actors : List<Actor>
+ director : Director
  }

Class Genre {
+ id : Long
+ name : String
+ genres : List<Genre>
  }

Class Director {
+ id : Long
+ name : String
+ directors : List<Director>
  }
}

package "exceptions" {
  class JpaException {
    + JpaException(String message)
    + void writeToLog(String message)
  }
  class ApiException {
    + ApiException(String message)
    + void writeToLog(String message)
  }
}

package "resources" {
Class Logger {
  + exceptionLog (String in)
  + consoleLog (String in)
  + FileWriter fileWriter : File
}
}

package "services" {
Class MovieService {
}

Class ActorService {
- static final String API_KEY
- static final String URL
- static HttpClient httpClient
+ List<ActorDTO> getAllActorsFromJSON(int page)
+ String getJSONResponse(String url)
+ List<ActorDTO> extractActorsFromCredits(String jsonCredits)
}


Class GenreService {
}

Class DirectorService
}

' Define relationships
"services" --> "daos"
"daos" <--> Database

"Application" -----> "services"
"Application" <---> "TMDB_API"

"IDAO" <-- "MovieDao"
"IDAO" <-- "GenreDAO"
"IDAO" <-- "ActorDAO"
"IDAO" <-- "DirectorDAO"

Movie "*" -- "*" Actor : has
Movie "*" -- "*" Genre : has
Movie "*" -- "1" Director : has


@enduml@enduml