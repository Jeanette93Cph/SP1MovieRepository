@startuml
!pragma layout smetana

component TMDB_API [
The Movie Database API
]

database Database [
Postgres Database
]

'' Styling
skinparam ArrowThickness 3
skinparam ArrowColor Orange
skinparam backgroundColor #f0f0f0
skinparam borderColor Black
skinparam borderThickness 1

skinparam class {
  BackgroundColor white
}

skinparam Component {
  BackgroundColor Lightblue
}

''

Class Application {
  +main(String[] args)
}


package "config" {
Class HibernateConfig {
- emf : EntityManagerFactory
- emfTest : EntityManagerFactory
}
}

package "daos" {
Interface IDAO {
	List<T> findAll();
	T persistEntity(T entity);
	void removeEntity(Long id);
	T findEntity(Long id);
	T updateEntity(T entity, Long id);
}

Class ActorDao {
- actorDAO : ActorDAO
- emf : EntityManagerFactory
+ findAll() : List<ActorDTO>
+ persistEntity(Actor entity)
+ removeEntity(Long id)
+ findEntity(Long id) : Actor
+ updateEntity(Actor entity, Long id)
}

Class DirectorDao {
- directorDAO : DirectorDAO
- emf : EntityManagerFactory
+ findAll() : List<DirectorDTO>
+ persistEntity(Director entity)
+ removeEntity(Long id)
+ findEntity(Long id) : Director
+ updateEntity(Director entity, Long id)
}

Class GenreDao {
- genreDAO : GenreDAO
- emf : EntityManagerFactory
+ findAll() : List<GenreDTO>
+ persistEntity(Genre entity)
+ removeEntity(Long id)
+ findEntity(Long id) : Genre
+ updateEntity(Genre entity, Long id)
}

Class MovieDao {
- movieDAO : MovieDAO
- emf : EntityManagerFactory
+ findAll() : List<MovieDTO>
+ persistEntity(Movie entity)
+ removeEntity(Long id)
+ findEntity(Long id) : Movie
+ updateEntity(Movie entity, Long id)
}
}

package "dtos" {
Class ActorDTO {
- id : Long
+ name : String
+ department : String
+ character : String
+ popularity : Double
+ List<ActorDTO> actors
}

Class CrewMemberDTO {
+ id : Long
+ name : String
+ job : String
+ List<CrewMemberDTO> crew;
}

Class DirectorDTO {
- id : Long
+ name : String
+ List<DirectorDTO> directors
}

Class GenreDTO {
- id : Long
+ name : String
+ List<GenreDTO> genres
}

Class MovieDTO {
- id : Long
- title : String
- originalLanguage : String
- releaseDate : LocalDate
- popularity : Double
- originalTitle : String
- voteAverage : Double
- voteCount : Integer
- List<GenreDTO> genres
- List<ActorDTO> actors
- List<DirectorDTO> directors
}

Class MovieResponseDTO {
- page : Integer
- totalPages : Integer
- totalResults : Integer
- List<MovieDTO> movieList
}
}

package "entities" {
Class Actor {
- id : Long
- name : String
- department : String
- popularity : Double
- character : String
}

Class Director {
- id : Long
- name : String
- Set<Movie> movies
}

Class Genre {
- id : Long
- name : String
- Set<Movie> movies
}

Class Movie {
- id : Long
- title : String
- originalLanguage : String
- originalTitle : String
- releaseDate : LocalDate
- popularity : Double
- voteAverage : Double
- voteCount : Integer
- Director director
- List<Genre> genres
- List<Actors> actors
}
}

package "exceptions" {
  class JpaException {
    +JpaException(String message)
  }
}

package "resources" {
Class Logger {
  +exceptionLog(String in)
  +consoleLog(String in)
}
}

package "services" {
Class ApiService {
+ GenreService()
+ MovieService()
+ DirectorService()
+ ActorService()
+ SyncApiService()
}

Class FetchData {}
}


' Define relationships
IDAO <|-- ActorDao : implements
IDAO <|-- DirectorDao : implements
IDAO <|-- GenreDao : implements
IDAO <|-- MovieDao : implements
@enduml@enduml